import pandas as pd
from openpyxl.styles import PatternFill
from openpyxl.styles import Font
import string

def highlight_text(cell, words):
    for word in words:
        if word in cell.value.lower():
            font = Font(bold=True)  # You can also use: Font(color="FFFF00", bold=True) to change color
            start_index = cell.value.lower().find(word.lower())
            end_index = start_index + len(word)
            cell.font = font
            cell.value = cell.value[:start_index] + cell.value[start_index:end_index].upper() + cell.value[end_index:]


# User-specified input parameters
input_file = "data/comments_all.csv"  # Specify the input Excel file location
column_number = 3  # Specify the column number (1-indexed) with the Excel sheet
num_topics = 5  # Specify the number of topics
topic_words = [
    ["Accessibility", "biking", "walking", "pedestrian", "parking", "car", "transit", "bus", "ferry", "train", "nj transit", "light rail", "shuttle"],  # Specify words for Topic 1
    ["Amenities", "bike share", "garden", "excercise", "playground", "play area", "pool", "courts", "swim", "fields", "boad", "kayak", "play", "sports", "golf"],  # Specify words for Topic 2
    ["Ecology", "Resilience", "wildlife", "nature", "contamination", "chromium", "cleanup", "erosion", "ecosystem", "water", "climate", "wetland", "habitat", "bird", "insect"],  # Specify words for Topic 3
    ["privatisation", "commercialization", "community park", "festivals", "concerts", "stadium", "arena", "sports venue", "amphitheater", "community", "Caven Point"],  # Specify words for Topic 4
    ["development", "People's Park", "Interior", "Habitats", "protect","protected", "public"]   # Specify words for Topic 5
]
sheet_names = ["Accessibility", "Amenities", "Ecology_Resilience", "Concepts", "Type of development"]  # Specify the name for each topic's sheet in the output Excel file
output_file = "data/Output_categorized_comments_all_2.xlsx"  # Specify the output Excel file name

def split_table(input_file, column_number, topic_words, output_file, sheet_names):
    # Read CSV file into a pandas DataFrame
    df = pd.read_csv(input_file)
    
    # Create separate DataFrames for each topic
    topic_dfs = {topic: pd.DataFrame() for topic in range(1, len(topic_words)+1)}
    
    # Create a DataFrame for uncategorized rows
    uncategorized_df = pd.DataFrame()
    
    # Define translation table to remove punctuation
    translator = str.maketrans('', '', string.punctuation)
    
    # Iterate through each row in the DataFrame
    for index, row in df.iterrows():
        cell_text = str(row[column_number - 1]).lower()  # Adjusting column number to 0-index and converting to lowercase
        cell_text = cell_text.translate(translator)  # Remove punctuation from cell text
        categorized = False
        for topic, words in enumerate(topic_words, start=1):
            for word in words:
                word = word.translate(translator)  # Remove punctuation from topic word
                if word.lower() in cell_text and f" {word.lower()} " in f" {cell_text} ":  # Check if the whole word is present in the cell text
                    topic_dfs[topic] = topic_dfs[topic].append(row, ignore_index=True)
                    categorized = True
                    break
            if categorized:
                break
        if not categorized:
            uncategorized_df = uncategorized_df.append(row, ignore_index=True)
    
    # Write each topic DataFrame to separate sheets in the output Excel file
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        # Write summary table
        summary_df = pd.DataFrame({
            'Parameter': ['Input File', 'Column Number', 'Topic Words', 'Output File', 'Sheet Names'],
            'Value': [input_file, column_number, topic_words, output_file, sheet_names]
        })
        
        # Calculate the number of rows categorized as 'uncategorized'
        num_uncategorized_rows = len(uncategorized_df)
        
        # Write total number of rows for each sheet
        rows_data = [{'Sheet Name': 'Input File', 'Number of Rows': len(df)}]
        for topic, topic_name in enumerate(sheet_names, start=1):
            rows_data.append({'Sheet Name': topic_name, 'Number of Rows': len(topic_dfs[topic])})
        rows_data.append({'Sheet Name': 'Uncategorized', 'Number of Rows': num_uncategorized_rows})
        rows_df = pd.DataFrame(rows_data)
        
        # Write summary table to the 'Summary' sheet
        summary_df.to_excel(writer, sheet_name='Summary', index=False)
        
        # Write total number of rows for each sheet to the 'Summary' sheet
        rows_df.to_excel(writer, sheet_name='Summary', index=False, startrow=len(summary_df) + 2)
        
        # Write each topic DataFrame to separate sheets
        for topic, sheet_name in zip(topic_dfs.keys(), sheet_names):
            topic_df = topic_dfs[topic]
            topic_df.to_excel(writer, sheet_name=sheet_name, index=False)
            worksheet = writer.sheets[sheet_name]
            for row in worksheet.iter_rows(min_row=2, min_col=column_number, max_col=column_number,
                                           max_row=len(topic_df) + 1):
                for cell in row:
                    highlight_text(cell, topic_words[topic-1])
        
        # Write uncategorized DataFrame to a new sheet
        uncategorized_df.to_excel(writer, sheet_name='Uncategorized', index=False)

# Call the function to split the table based on the specified parameters
split_table(input_file, column_number, topic_words, output_file, sheet_names)